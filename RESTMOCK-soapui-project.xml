<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="04c429ab-ec36-46c7-97d0-9aa6270e7edb" activeEnvironment="Default" name="RESTMOCK" resourceRoot="" soapui-version="5.7.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="61c1fa28-94e2-4ca7-b362-46ea866596a8" port="8080" path="/" host="DESKTOP-BPQ80UG" name="RESTMockService1"><con:settings/><con:properties/><con:restMockAction name="/april16" method="GET" resourcePath="/april16" id="4508c360-788c-4ac9-bac9-715198da77e2"><con:settings/><con:defaultResponse>Response1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
</con:dispatchPath><con:response name="Valid-Data" id="b1dd9dfc-7091-4c95-89e8-a7d0d6782009" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
  {
      "ID": "1",
      "name": "amit1",
       "location" : "agra1"
  },
    { 
      "ID": "2",
      "name": "amit2",
      "location" : "agra2"
  },
    { 
     "ID": "3",
     "name": "amit3",
    "location" : "agra3"
  }
]</con:responseContent><con:header><con:name>token</con:name><con:value>12345</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>